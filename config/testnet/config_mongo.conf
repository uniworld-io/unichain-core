
net {
  type = mainnet
  #type = testnet
}

storage {
  # Directory for storing persistent data
  db.version = 2,
  db.engine = "LEVELDB",
  db.sync = false,
  db.directory = "database",
  index.directory = "index",
  transHistory.switch = "on",
  # You can custom these 14 databases' configs:

  # account, account-index, asset-issue, block, block-index,
  # block_KDB, peers, properties, recent-block, trans,
  # utxo, votes, witness, witness_schedule.

  # Otherwise, db configs will remain defualt and data will be stored in
  # the path of "output-directory" or which is set by "-d" ("--output-directory").

  # Attention: name is a required field that must be set !!!
  properties = [
//    {
//      name = "account",
//      path = "storage_directory_test",
//      createIfMissing = true,
//      paranoidChecks = true,
//      verifyChecksums = true,
    //      compressionType = 1,        // compressed with snappy
    //      blockSize = 4096,           // 4  KB =         4 * 1024 B
    //      writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B
    //      cacheSize = 10485760,       // 10 MB = 10 * 1024 * 1024 B
    //      maxOpenFiles = 100
    //    },
//    {
//      name = "account-index",
//      path = "storage_directory_test",
//      createIfMissing = true,
//      paranoidChecks = true,
//      verifyChecksums = true,
    //      compressionType = 1,        // compressed with snappy
    //      blockSize = 4096,           // 4  KB =         4 * 1024 B
    //      writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B
    //      cacheSize = 10485760,       // 10 MB = 10 * 1024 * 1024 B
    //      maxOpenFiles = 100
    //    },
  ]

  needToUpdateAsset = true

  //dbsettings is needed when using rocksdb as the storage implement (db.version=2 and db.engine="ROCKSDB").
  //we'd sunichaingly recommend that do not modify it unless you know every item's meaning clearly.
  dbSettings = {
    levelNumber = 7
    //compactThreads = 32
    blocksize = 64  // n * KB
    maxBytesForLevelBase = 256  // n * MB
    maxBytesForLevelMultiplier = 10
    level0FileNumCompactionTrigger = 4
    targetFileSizeBase = 256  // n * MB
    targetFileSizeMultiplier = 1
  }

  //backup settings when using rocks db as the storage implement (db.version=2 and db.engine="ROCKSDB").
  //if you want to use the backup plugin, please confirm set the db.version=2 and db.engine="ROCKSDB" above.
  backup = {
    enable = false  // indicate whether enable the backup plugin
    propPath = "prop.properties" // record which bak directory is valid
    bak1path = "bak1/database" // you must set two backup directories to prevent application halt unexpected(e.g. kill -9).
    bak2path = "bak2/database"
    frequency = 10000   // indicate backup db once every 10000 blocks processed.
  }
}

node.discovery = {
  enable = true
  persist = true
  bind.ip = ""
  external.ip = null
}

node.backup {
  port = 4416

  # my priority, each member should use different priority
  priority = 8

  # peer's ip list, can't contain mine
  members = [
    # "ip",
    # "ip"
  ]
}

node {
  # trust node for relay node
  # trustNode = "ip:port"
  trustNode = "127.0.0.1:8864"

  # expose extension api to public or not
  walletExtensionApi = true

  listen.port = 5525

  connection.timeout = 2

  tcpNettyWorkThreadNum = 0

  udpNettyWorkThreadNum = 1

  # Number of validate sign thread, default availableProcessors / 2
  # validateSignThreadNum = 16

  connectFactor = 0.3
  activeConnectFactor = 0.1

  maxActiveNodes = 30

  maxActiveNodesWithSameIp = 2

  maxHttpConnectNumber = 50

  minParticipationRate = 1

  # check the peer data transfer ,disconnect factor
  disconnectNumberFactor = 0.4
  maxConnectNumberFactor = 0.8
  receiveTcpMinDataLength = 2048
  isOpenFullTcpDisconnect = true

  p2p {
    version = 1 # 1: mainnet; 2: testnet
  }

  active = [
    # Active establish connection in any case
    # Sample entries:
    # "ip:port",
    # "ip:port"
  ]

  passive = [
    # Passive accept connection in any case
    # Sample entries:
    # "ip:port",
    # "ip:port"
  ]

  fastForward = [
    "127.0.0.1:5525"

  ]

  http {
    fullNodePort = 6636
    solidityPort = 7749
  }

  rpc {
    port = 8864
    #solidityPort = 9981
    # Number of gRPC thread, default availableProcessors / 2
    # thread = 16

    # The maximum number of concurrent calls permitted for each incoming connection
    # maxConcurrentCallsPerConnection =

    # The HTTP/2 flow control window, default 1MB
    # flowControlWindow =

    # Connection being idle for longer than which will be gracefully terminated
    maxConnectionIdleInMillis = 60000

    # Connection lasting longer than which will be gracefully terminated
    # maxConnectionAgeInMillis =

    # The maximum message size allowed to be received on the server, default 4MB
    # maxMessageSize =

    # The maximum size of header list allowed to be received, default 8192
    # maxHeaderListSize =

    # Transactions can only be broadcast if the number of effective connections is reached.
    minEffectiveConnection = 0
  }

  # number of solidity thread in the FullNode.
  # If accessing solidity rpc and http interface timeout, could increase the number of threads,
  # The default value is the number of cpu cores of the machine.
  #solidity.threads = 8

  # Limits the maximum percentage (default 75%) of producing block interval
  # to provide sufficient time to perform other operations e.g. broadcast block
  # blockProducedTimeOut = 75

  # Limits the maximum number (default 700) of transaction from network layer
  # netMaxTrxPerSecond = 700
}



seed.node = {
  # List of the seed nodes
  # Seed nodes are stable full nodes
  #ip.list = [
  #  "3.1.220.165:5525",
  #  "18.136.105.112:5525"
  #]
  ip.list = [
    "18.136.105.112:5525"
  ]
}

genesis.block = {
  # Reserve balance
  assets = [
    {
      accountName = "Unichain"
      accountType = "AssetIssue"
      address = "UinLtqgPm9waBdUSVAAzRR6pfBzfQNC4c2"
      balance = "1000000000000000"
    },
    {
      accountName = "BurnAccount"
      accountType = "AssetIssue"
      address = "UQ2kTPSBVQhC47gXcKfTDVKMi4SQXRbmdf"
      balance = "-1500000000000000"
    }
  ]
  
  #Unichain initial witnesses 
  witnesses = [
    {
      address: Ujhe4Wb6DXAVVLt9ziT4mf9HC63izpJscv,
      url = "https://unichain.world",
      voteCount = 5000005
    },
    {
      address: Uk28n4A28nfXhgYWnRr6mXDbTbAeCkEtJ7,
      url = "https://unime.world",
      voteCount = 5000001
    }
  ]

  timestamp = "0" #2019-10-25 12:00:00

  parentHash = "0x0000000000000000000000000000000000000000000000000000000000000000"
}

// Optional.The default is empty.
// It is used when the witness account has set the witnessPermission.
// When it is not empty, the localWitnessAccountAddress represents the address of the witness account,
// and the localwitness is configured with the private key of the witnessPermissionAddress in the witness account.
// When it is empty,the localwitness is configured with the private key of the witness account.

//localWitnessAccountAddress =

localwitness = [
]

#localwitnesskeystore = [
#  "localwitnesskeystore.json"
#]

block = {
  needSyncCheck = true
  maintenanceTimeInterval = 300000
  proposalExpireTime = 600000 // 3 day: 259200000(ms)
}

# Transaction reference block, default is "head", configure to "solid" can avoid TaPos error
# trx.reference.block = "head" // head;solid;

# This property sets the number of milliseconds after the creation of the transaction that is expired, default value is  60000.
# trx.expiration.timeInMilliseconds = 60000

vm = {
  supportConstant = true
  minTimeRatio = 0.0
  maxTimeRatio = 5.0
  saveInternalTx = false

  # In rare cases, transactions that will be within the specified maximum execution time (default 10(ms)) are re-executed and packaged
  # longRunningTime = 10
}

committee = {
  allowAdaptiveEnergy = 1  //mainnet:0 (reset by committee),test:1
  allowCreationOfContracts = 1  //mainnet:0 (reset by committee),test:1
  allowZKSnarkTransaction = 1 //mainnet:0 (reset by committee),test:1
  allowMultiSign = 1 //mainnet:0 (reset by committee),test:1
  allowTvmTransferUnc = 1
  allowTvmConstantinople = 1
  allowTvmSolidity059 = 1
}

event.subscribe = {
    enable = true
    mongodb = true
    kafka = false
    native = {
      useNativeQueue = false // if true, use native message queue, else use event plugin.
      bindport = 5555 // bind port
      sendqueuelength = 1000 //max length of send queue
    }

    path = "/home/ubuntu/unichain/plugins/plugin-mongodb-1.0.0.zip" // absolute path of plugin
    server = "18.141.168.229:27017" // target server address to receive event triggers
    dbconfig="unichain-query|unichain-query|unichain-query@testnet|2" // dbname|username|password|version
    contractParse = true,
    topics = [
        {
          triggerName = "nativeevent"
          enable = true
          topic = "nativeevent"
        },
        {
          triggerName = "block" // block trigger, the value can't be modified
          enable = true
          topic = "block" // plugin topic, the value could be modified
        },
        {
          triggerName = "transaction"
          enable = true
          topic = "transaction"
        },
        {
          triggerName = "contractevent"
          enable = true
          topic = "contractevent"
        },
        {
          triggerName = "contractlog"
          enable = true
          topic = "contractlog"
        },
	{
          triggerName = "solidity" // solidity block event trigger
          enable = true
          topic = "solidity"
        },
        {
          triggerName = "solidityevent"
          enable = true
          topic = "solidityevent"
        },
        {
          triggerName = "soliditylog"
          enable = true
          topic = "soliditylog"
        }
    ]

    filter = {
       fromblock = "earliest" // the value could be "", "earliest" or a specified block number as the beginning of the queried range
       toblock = "latest" // the value could be "", "latest" or a specified block number as end of the queried range
       contractAddress = [
           "" // contract address you want to subscribe, if it's set to "", you will receive contract logs/events with any contract address.
       ]

       contractTopic = [
           "" // contract topic you want to subscribe, if it's set to "", you will receive contract logs/events with any contract topic.
       ]
    }
}

