/*
 * Unichain-core is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Unichain-core is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package protocol;

option java_package = "org.unichain.protos"; //Specify the name of the package that generated the Java file
option java_outer_classname = "Contract"; //Specify the class name of the generated Java file
option go_package = "github.com/unichainprotocol/grpc-gateway/core";

import "core/Unichain.proto";

message TokenPage {
  int64  page_size = 1;
  int64 page_index = 2;
  int64 total = 3;
  repeated CreateTokenContract tokens = 4;
}

message Urc20ContractPage {
  int64  page_size = 1;
  int64 page_index = 2;
  int64 total = 3;
  repeated Urc20CreateContract contracts = 4;
}

message AccountCreateContract {
  bytes owner_address = 1;
  bytes account_address = 2;
  AccountType type = 3;
}

// Update account name. Account name is not unique now.
message AccountUpdateContract {
  bytes account_name = 1;
  bytes owner_address = 2;
}

// Set account id if the account has no id. Account id is unique and case insensitive.
message SetAccountIdContract {
  bytes account_id = 1;
  bytes owner_address = 2;
}

message TransferContract {
  bytes owner_address = 1;
  bytes to_address = 2;
  int64 amount = 3;
}

message FutureTransferContract {
  bytes owner_address = 1;
  bytes to_address = 2;
  int64 amount = 3;
  int64 expire_time = 4;
}

message FutureDealTransferContract {
  bytes owner_address = 1;
  bytes to_address = 2;
  int64 deal_id = 3;
  int64 amount = 4;
}

message TransferAssetContract {
  bytes asset_name = 1; // this field is token name before the proposal ALLOW_SAME_TOKEN_NAME is active, otherwise it is token id and token is should be in string format.
  bytes owner_address = 2;
  bytes to_address = 3;
  int64 amount = 4;
}


message VoteAssetContract {
  bytes owner_address = 1;
  repeated bytes vote_address = 2;
  bool support = 3;
  int32 count = 5;
}

message VoteWitnessContract {
  message Vote {
    bytes vote_address = 1;
    int64 vote_count = 2;
  }
  bytes owner_address = 1;
  repeated Vote votes = 2;
  bool support = 3;
}

message UpdateSettingContract {
  bytes owner_address = 1;
  bytes contract_address = 2;
  int64 consume_user_resource_percent = 3;
}

message UpdateEnergyLimitContract {
  bytes owner_address = 1;
  bytes contract_address = 2;
  int64 origin_energy_limit = 3;
}

message ClearABIContract {
  bytes owner_address = 1;
  bytes contract_address = 2;
}

message WitnessCreateContract {
  bytes owner_address = 1;
  bytes url = 2;
}

message WitnessUpdateContract {
  bytes owner_address = 1;
  bytes update_url = 12;
}

/**
  urc30 contracts
 */
message CreateTokenContract {
  bytes owner_address = 1;
  string name = 2;
  string abbr = 3;
  int64 max_supply = 4;
  int64 total_supply = 5;
  int64 start_time = 6;
  int64 end_time = 7;
  string description = 8;
  string url = 9;
  int64 fee = 10;
  int64 extra_fee_rate = 11;
  int64 fee_pool = 12;
  int64 burned = 13;
  int64 latest_operation_time = 14;
  int64 lot = 15;
  int64 fee_pool_origin = 16;
  int64 exch_unx_num = 17; //#unw
  int64 exch_num = 18; //exchange to #token
  int64 critical_update_time = 19;//critical update time, ex: fee, ownership...
  int64 create_acc_fee = 20; //create new account fee
  bytes address = 21; //address for compatible
}

message TransferTokenOwnerContract {
  bytes owner_address = 1;
  bytes to_address = 2;
  string token_name = 3;
}

message ExchangeTokenContract {
  bytes owner_address = 1;
  string token_name = 2;
  int64 amount = 3;
}

message ContributeTokenPoolFeeContract {
  bytes owner_address = 1;
  string token_name = 2;
  int64 amount = 3;
}

message UpdateTokenParamsContract {
  bytes owner_address = 1;
  string token_name = 2;
  int64 amount = 3;
  int64 extra_fee_rate = 4;
  int64 lot = 5;
  string url = 6;
  string description = 7;
  int64 total_supply = 8;
  int64 fee_pool = 9;
  int64 exch_unx_num = 10; //exchange by unw
  int64 exch_num = 11; //exchange to by token
  int64 create_acc_fee = 12; //create account fee by token
}

message MineTokenContract {
  bytes owner_address = 1;
  string token_name = 2;
  int64 amount = 3;
}

message BurnTokenContract {
  bytes owner_address = 1;
  string token_name = 2;
  int64 amount = 3;
}

message TransferTokenContract {
  bytes owner_address = 1;
  bytes to_address = 2;
  string token_name = 3;
  int64 amount = 4;
  int64 available_time = 5;
}

message WithdrawFutureTokenContract {
  bytes owner_address = 1;
  string token_name = 2;
}

/**
  urc20 token
 */
message Urc20CreateContract {
  bytes owner_address = 1;
  bytes address = 2;
  string symbol = 3;
  string name = 4;
  int64 decimals = 5;
  string max_supply = 6;//decimal string
  string total_supply = 7;//decimal string
  int64 start_time = 8;
  int64 end_time = 9;
  string url = 10;
  int64 fee = 11;
  int64 extra_fee_rate = 12;
  int64 fee_pool = 13;
  string burned = 14;//decimal string
  int64 latest_operation_time = 15;//internal
  int64 lot = 16;
  int64 fee_pool_origin = 17;//internal
  int64 exch_unx_num = 18;
  int64 exch_num = 19;
  bool  exch_enable = 20;
  int64 critical_update_time = 21;//internal
  int64 create_acc_fee = 22;
}

message Urc20TransferFromContract {
  bytes owner_address = 1; //spender
  bytes from = 2; //owner
  bytes to = 3; //target
  bytes address = 4; //contract
  string amount = 5; //decimal string
  int64 available_time = 6;
}

message Urc20TransferContract {
  bytes owner_address = 1;
  bytes address = 2;
  bytes to = 3;
  string amount = 4;//decimal string
  int64 available_time = 5;
}

message Urc20ApproveContract{
  bytes owner_address = 1;
  bytes address = 2;
  bytes spender = 3;
  string amount = 4;//decimal string
}

message Urc20MintContract {
  bytes owner_address = 1;
  bytes address = 2;
  string amount = 3;//decimal string
  bytes to_address = 4;
}

message Urc20BurnContract {
  bytes owner_address = 1;
  bytes address = 2;
  string amount = 3;//decimal string
}

message Urc20TransferOwnerContract {
  bytes owner_address = 1;
  bytes to_address = 2;
  bytes address = 3;
}

message Urc20ExchangeContract {
  bytes owner_address = 1;
  bytes address = 2;
  int64 amount = 3; //ginza amount
}

message Urc20ContributePoolFeeContract {
  bytes owner_address = 1;
  bytes address = 2;
  int64 amount = 3;
}

message Urc20UpdateParamsContract {
  bytes owner_address = 1;
  bytes address = 2;
  int64 fee = 3; //what is this ?
  int64 extra_fee_rate = 4;
  int64 lot = 5;
  string url = 6;
  string total_supply = 7;
  int64 fee_pool = 8;
  int64 exch_unx_num = 9;
  int64 exch_num = 10;
  int64 create_acc_fee = 11;
}

message Urc20WithdrawFutureContract {
  bytes owner_address = 1;
  bytes address = 2;
}

message AssetIssueContract {
  string id = 41;

  message FrozenSupply {
    int64 frozen_amount = 1;
    int64 frozen_days = 2;
  }
  bytes owner_address = 1;
  bytes name = 2;
  bytes abbr = 3;
  int64 total_supply = 4;
  repeated FrozenSupply frozen_supply = 5;
  int32 unx_num = 6;
  int32 precision = 7;
  int32 num = 8;
  int64 start_time = 9;
  int64 end_time = 10;
  int64 order = 11; // useless
  int32 vote_score = 16;
  bytes description = 20;
  bytes url = 21;
  int64 free_asset_net_limit = 22;
  int64 public_free_asset_net_limit = 23;
  int64 public_free_asset_net_usage = 24;
  int64 public_latest_free_net_time = 25;
}

message ParticipateAssetIssueContract {
  bytes owner_address = 1;
  bytes to_address = 2;
  bytes asset_name = 3; // this field is token name before the proposal ALLOW_SAME_TOKEN_NAME is active, otherwise it is token id and token is should be in string format.
  int64 amount = 4; // the amount of ginzas
}

enum ResourceCode {
  BANDWIDTH = 0x00;
  ENERGY = 0x01;
}

message FreezeBalanceContract {
  bytes owner_address = 1;
  int64 frozen_balance = 2;
  int64 frozen_duration = 3;

  ResourceCode resource = 10;
  bytes receiver_address = 15;
}

message UnfreezeBalanceContract {
  bytes owner_address = 1;

  ResourceCode resource = 10;
  bytes receiver_address = 15;
}

message UnfreezeAssetContract {
  bytes owner_address = 1;
}

message WithdrawBalanceContract {
  bytes owner_address = 1;
}

message FutureWithdrawContract {
  bytes owner_address = 1;
}

message UpdateAssetContract {
  bytes owner_address = 1;
  bytes description = 2;
  bytes url = 3;
  int64 new_limit = 4;
  int64 new_public_limit = 5;
}

message ProposalCreateContract {
  bytes owner_address = 1;
  map<int64, int64> parameters = 2;
}

message ProposalApproveContract {
  bytes owner_address = 1;
  int64 proposal_id = 2;
  bool is_add_approval = 3; //add or remove approval
}

message ProposalDeleteContract {
  bytes owner_address = 1;
  int64 proposal_id = 2;
}

message CreateSmartContract {
  bytes owner_address = 1;
  SmartContract new_contract = 2;
  int64 call_token_value = 3;
  int64 token_id = 4;
}

message TriggerSmartContract {
  bytes owner_address = 1;
  bytes contract_address = 2;
  int64 call_value = 3;
  bytes data = 4;
  int64 call_token_value = 5;
  int64 token_id = 6;
}

message BuyStorageContract {
  bytes owner_address = 1;
  int64 quant = 2; // unx quantity for buy storage (ginza)
}

message BuyStorageBytesContract {
  bytes owner_address = 1;
  int64 bytes = 2; // storage bytes for buy
}

message SellStorageContract {
  bytes owner_address = 1;
  int64 storage_bytes = 2;
}

message ExchangeCreateContract {
  bytes owner_address = 1;
  bytes first_token_id = 2;
  int64 first_token_balance = 3;
  bytes second_token_id = 4;
  int64 second_token_balance = 5;
}

message ExchangeInjectContract {
  bytes owner_address = 1;
  int64 exchange_id = 2;
  bytes token_id = 3;
  int64 quant = 4;
}

message ExchangeWithdrawContract {
  bytes owner_address = 1;
  int64 exchange_id = 2;
  bytes token_id = 3;
  int64 quant = 4;
}

message ExchangeTransactionContract {
  bytes owner_address = 1;
  int64 exchange_id = 2;
  bytes token_id = 3;
  int64 quant = 4;
  int64 expected = 5;
}

message AccountPermissionUpdateContract {
  bytes owner_address = 1;
  Permission owner = 2; //Empty is invalidate
  Permission witness = 3; //Can be empty
  repeated Permission actives = 4; //Empty is invalidate
}

message UpdateBrokerageContract {
  bytes owner_address = 1;
  int32 brokerage = 2; // 1 mean 1%
}

message Urc721CreateContract{
  bytes owner_address = 1;
  bytes address = 2;
  string symbol = 3;
  string name = 4;
  int64 total_supply = 5;
  bytes minter = 6;
}

message Urc721MintContract{
  bytes owner_address = 1;
  bytes address = 2;
  bytes to_address = 3;
  string uri = 4;
  int64 token_id = 5;
}

message Urc721RemoveMinterContract{
  bytes owner_address = 1;
  bytes address = 2;
}

message Urc721AddMinterContract{
  bytes owner_address = 1;
  bytes address = 2;
  bytes minter = 3;
}

message Urc721RenounceMinterContract{
  bytes owner_address = 1;
  bytes address = 2;
}

message Urc721BurnContract{
  bytes owner_address = 1;
  bytes address = 2;
  int64 token_id = 3;
}

message Urc721ApproveContract{
  bytes owner_address = 1;
  bytes address = 2;
  int64 token_id = 3;
  bytes to = 4;
  bool approve = 5;
}

message Urc721SetApprovalForAllContract{
  bytes owner_address = 1;
  bytes address = 4;  //contract address
  bytes to_address = 2;
  bool approve = 3; //approve or dis-approve
}

message Urc721TransferFromContract{
  bytes owner_address = 1; //owner or operator
  bytes address = 3;
  bytes to = 2;
  int64 token_id = 4;
}

/**
  PoS Bridge contracts
 */
message PosBridgeSetupContract{
  bytes owner_address = 1;
  bytes new_owner= 2;
  int64 min_validator = 3;
  repeated string validators = 4;
  uint32 consensus_rate = 5; //percent 0 to 100
  string predicate_native = 6; //hex
  string predicate_token = 7; //hex
  string predicate_nft = 8; //hex
}

//call from admin
message PosBridgeMapTokenContract{
  bytes owner_address = 1;
  int64 root_chainid = 2;
  string root_token= 3; //hex address if token, symbol if native
  int64 child_chainid = 4;
  string child_token= 5; //hex address
  uint32 type = 6; //1:native, 2:erc20, 3:erc721
}

//call from admin
message PosBridgeCleanMapTokenContract{
    bytes owner_address = 1;
    int64 root_chainid = 2;
    string root_token= 3; //hex address if token, symbol if native
    int64 child_chainid = 4;
    string child_token= 5;
}

//call from user
message PosBridgeDepositContract{
  bytes owner_address = 1;
  string root_token = 2; //hex address if token, unw if native
  int64 child_chainid = 3;
  string receive_address = 4;
  string data = 5; //amount or token id, hex
}

//call from user
message PosBridgeWithdrawContract{
  bytes owner_address = 1;
  string child_token = 2; //hex address
  string receive_address = 3; //hex address
  string data = 4; //amount or tokenid, hex
}

/**
  calldata format:
  {
     signatures: string[]
     message: bytes[] // abi encoded {
       rootChainId: hex
       rootTokenAddr: hex
       childChainId: hex
       receiveAddr: hex
       value: hex, token amount or Id
     }
  }
 */
message PosBridgeDepositExecContract{
  bytes owner_address = 1;
  repeated string signatures = 2;
  string message = 3;
}

/**
      signatures: string[]
      message: bytes[] // abi encoded {
       childChainId: hex
       childTokenAddr: hex
       rootChainId: hex
       receiveAddr: hex
       value: hex, token amount or Id
     }
 */
message PosBridgeWithdrawExecContract{
  bytes owner_address = 1;
  repeated string signatures = 2;
  string message = 3;
}
